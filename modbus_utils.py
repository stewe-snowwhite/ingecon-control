from pymodbus.client.sync import ModbusTcpClient
from pymodbus.exceptions import ModbusException
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    filename='modbus.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def check_modbus_connection(ip_address, port=502, timeout=2):
    try:
        client = ModbusTcpClient(host=ip_address, port=port, timeout=timeout)
        result = client.connect()
        client.close()
        return result
    except ModbusException:
        return False
    except Exception as e:
        logging.error(f"[Modbus] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—ñ –∑ {ip_address}: {e}")
        return False

def modbus_turn_on(ip, port=502):
    try:
        client = ModbusTcpClient(ip, port=port)
        if client.connect():
            client.write_register(1000, 6, slave=1)  # CMD6: Start inverter
            logging.info(f"[Modbus] üîå –Ü–Ω–≤–µ—Ä—Ç–æ—Ä {ip} ‚Äî –∑–∞–ø—É—â–µ–Ω–æ (CMD6)")
        else:
            logging.warning(f"[Modbus] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ {ip} –¥–ª—è –∑–∞–ø—É—Å–∫—É")
        client.close()
    except Exception as e:
        logging.error(f"[Modbus] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ {ip}: {e}")

def modbus_turn_off(ip, port=502):
    try:
        client = ModbusTcpClient(ip, port=port)
        if client.connect():
            client.write_register(1000, 5, slave=1)  # CMD5: Stop inverter
            logging.info(f"[Modbus] ‚õî –Ü–Ω–≤–µ—Ä—Ç–æ—Ä {ip} ‚Äî –∑—É–ø–∏–Ω–µ–Ω–æ (CMD5)")
        else:
            logging.warning(f"[Modbus] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ {ip} –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
        client.close()
    except Exception as e:
        logging.error(f"[Modbus] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ {ip}: {e}")

def modbus_limit_power(ip, value=50, port=502):
    try:
        client = ModbusTcpClient(ip, port=port)
        if client.connect():
            value = max(0, min(int(value), 100))

            # ‚öôÔ∏è –ó–∞–ø–∏—Å —É —Ä–µ–≥—ñ—Å—Ç—Ä 46
            result = client.write_register(46, value, slave=1)
            if result.isError():
                logging.warning(f"[Modbus] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è {ip}")
            else:
                logging.info(f"[Modbus] ‚öôÔ∏è –û–±–º–µ–∂–µ–Ω–Ω—è {ip} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}%")

                # üì§ –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä–∞ 46
                rr = client.read_holding_registers(46, 1, slave=1)
                if rr and not rr.isError() and hasattr(rr, 'registers') and len(rr.registers) > 0:
                    actual = rr.registers[0]
                    logging.info(f"[Modbus] üì§ –§–∞–∫—Ç–∏—á–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è: {actual}%")
                else:
                    logging.warning(f"[Modbus] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è ‚Äî –ø—É—Å—Ç–∞ –∞–±–æ –ø–æ–º–∏–ª–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")

                # üß† –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏
                rr_reason = client.read_holding_registers(47, 1, slave=1)
                if rr_reason and not rr_reason.isError() and hasattr(rr_reason, 'registers') and len(rr_reason.registers) > 0:
                    reason = rr_reason.registers[0]
                    if reason == 9:
                        logging.info(f"[Modbus] ‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è: Configuration (A) [–∫–æ–¥ 9]")
                    else:
                        logging.warning(f"[Modbus] ‚ö†Ô∏è –Ü–Ω—à–∞ –ø—Ä–∏—á–∏–Ω–∞: –∫–æ–¥ {reason}")
                else:
                    logging.warning(f"[Modbus] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –æ–±–º–µ–∂–µ–Ω–Ω—è")
        else:
            logging.warning(f"[Modbus] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ {ip}")
        client.close()
    except Exception as e:
        logging.error(f"[Modbus] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ {ip}: {e}")

def read_command_status(ip, port=502):
    try:
        client = ModbusTcpClient(ip, port=port)
        if client.connect():
            result = client.read_holding_registers(1000, 2, slave=1)
            client.close()
            if result and hasattr(result, 'registers') and len(result.registers) >= 2:
                cmd = result.registers[0]
                scaled = result.registers[1]
                percent = round(scaled / 32767 * 100, 1)
                logging.info(f"[Modbus] üì• {ip} ‚Üí –ü–æ—Ç–æ—á–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è: {percent}% (scaled={scaled})")
                return cmd, scaled
            else:
                logging.warning(f"[Modbus] ‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑—á–∏—Ç–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–∏ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤")
    except Exception as e:
        logging.error(f"[Modbus] ‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑ {ip}: {e}")
    return None, None
