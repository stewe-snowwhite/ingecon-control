from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from modbus_utils import check_modbus_connection
import os

app = Flask(__name__)
app.secret_key = 'supersecretkey'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
db = SQLAlchemy(app)

# –ú–æ–¥–µ–ª—å —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞
class Inverter(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    group = db.Column(db.String(100), nullable=False)
    ip_address = db.Column(db.String(100), nullable=False)
    login = db.Column(db.String(100), nullable=True)
    password = db.Column(db.String(100), nullable=True)

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
@app.route('/')
def index():
    selected_group = request.args.get('group')

    groups = db.session.query(Inverter.group).distinct().all()
    groups = [g[0] for g in groups]

    if selected_group:
        inverters = Inverter.query.filter_by(group=selected_group).all()
    else:
        inverters = Inverter.query.all()

    return render_template(
        "index.html",
        inverters=inverters,
        groups=groups,
        selected_group=selected_group
    )

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞
@app.route('/add', methods=['GET', 'POST'])
def add_inverter():
    if request.method == 'POST':
        name = request.form['name']
        group = request.form['group']
        ip = request.form['ip']
        login = request.form['login']
        password = request.form['password']

        new_inv = Inverter(name=name, group=group, ip_address=ip, login=login, password=password)
        db.session.add(new_inv)
        db.session.commit()
        flash('–Ü–Ω–≤–µ—Ä—Ç–æ—Ä –¥–æ–¥–∞–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.', 'info')
        return redirect(url_for('index'))

    groups = db.session.query(Inverter.group).distinct().all()
    groups = [g[0] for g in groups]
    return render_template("add_inverter.html", groups=groups)

# –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞
@app.route('/test/<int:inverter_id>')
def test_connection(inverter_id):
    inverter = Inverter.query.get_or_404(inverter_id)
    result = check_modbus_connection(inverter.ip_address)
    if result:
        flash(f'–Ü–Ω–≤–µ—Ä—Ç–æ—Ä {inverter.name} ({inverter.ip_address}) –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø–æ Modbus TCP.', 'success')
    else:
        flash(f'–Ü–Ω–≤–µ—Ä—Ç–æ—Ä {inverter.name} ({inverter.ip_address}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø–æ Modbus TCP.', 'danger')
    return redirect(url_for('index'))

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
@app.route('/control', methods=['POST'])
def control_inverters():
    selected_ids = request.form.getlist('selected_ids')
    action = request.form.get('action')

    if not selected_ids:
        flash("–ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞.", "warning")
        return redirect(url_for('index'))

    if not action:
        flash("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –¥—ñ—é. –ú–æ–∂–ª–∏–≤–æ, —Ñ–æ—Ä–º–∞ –±—É–ª–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.", "danger")
        return redirect(url_for('index'))

    inverters = Inverter.query.filter(Inverter.id.in_(selected_ids)).all()

    if action == "test":
        for inv in inverters:
            result = check_modbus_connection(inv.ip_address)
            if result:
                flash(f'‚úÖ {inv.name} ({inv.ip_address}) ‚Äî –¥–æ—Å—Ç—É–ø–Ω–∏–π', 'success')
            else:
                flash(f'‚ùå {inv.name} ({inv.ip_address}) ‚Äî –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'danger')
        return redirect(url_for('index'))

    if action == "delete":
        count = 0
        for inv in inverters:
            db.session.delete(inv)
            count += 1
        db.session.commit()
        flash(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {count} —ñ–Ω–≤–µ—Ä—Ç–æ—Ä(—ñ–≤).", "info")
        return redirect(url_for('index'))

    for inv in inverters:
        print(f"üëâ {action.upper()} ‚Üí {inv.name} ({inv.ip_address})")

        if action == "on":
            modbus_turn_on(inv.ip_address)
        elif action == "off":
            modbus_turn_off(inv.ip_address)
        elif action == "limit":
            modbus_limit_power(inv.ip_address, value=50)

    flash(f"–ö–æ–º–∞–Ω–¥–∞ \"{action}\" –≤–∏–∫–æ–Ω–∞–Ω–∞ –¥–ª—è {len(inverters)} —ñ–Ω–≤–µ—Ä—Ç–æ—Ä—ñ–≤.", "success")
    return redirect(url_for('index'))

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞
@app.route('/edit/<int:inverter_id>', methods=['GET', 'POST'])
def edit_inverter(inverter_id):
    inverter = Inverter.query.get_or_404(inverter_id)

    if request.method == 'POST':
        inverter.name = request.form['name']
        inverter.group = request.form['group']
        inverter.ip_address = request.form['ip']
        inverter.login = request.form['login']
        inverter.password = request.form['password']
        db.session.commit()
        flash('–Ü–Ω–≤–µ—Ä—Ç–æ—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.', 'success')
        return redirect(url_for('index'))

    groups = db.session.query(Inverter.group).distinct().all()
    groups = [g[0] for g in groups]
    return render_template('edit_inverter.html', inverter=inverter, groups=groups)


# –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ –æ–∫—Ä–µ–º–æ
@app.route('/delete/<int:inverter_id>', methods=['POST'])
def delete_inverter(inverter_id):
    inverter = Inverter.query.get_or_404(inverter_id)
    db.session.delete(inverter)
    db.session.commit()
    flash(f'–Ü–Ω–≤–µ—Ä—Ç–æ—Ä "{inverter.name}" –≤–∏–¥–∞–ª–µ–Ω–æ.', 'info')
    return redirect(url_for('index'))

# –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Modbus TCP
def modbus_turn_on(ip):
    print(f"[Modbus] –£–≤—ñ–º–∫–Ω—É—Ç–∏ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä {ip}")

def modbus_turn_off(ip):
    print(f"[Modbus] –í–∏–º–∫–Ω—É—Ç–∏ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä {ip}")

def modbus_limit_power(ip, value):
    print(f"[Modbus] –û–±–º–µ–∂–∏—Ç–∏ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ {ip} –¥–æ {value}%")

if __name__ == '__main__':
    if not os.path.exists('database.db'):
        with app.app_context():
            db.create_all()
    app.run(debug=True, host='0.0.0.0', port=5000)
